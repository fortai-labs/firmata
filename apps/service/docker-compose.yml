version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scraper_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Uncomment to run the service in Docker
  # scraper-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   environment:
  #     - APP_DATABASE_URL=postgres://postgres:postgres@postgres:5432/scraper_dev
  #     - APP_REDIS_URL=redis://redis:6379
  #     - APP_STORAGE_ENDPOINT=http://minio:9000
  #     - APP_STORAGE_REGION=us-east-1
  #     - APP_STORAGE_BUCKET=scraper-dev
  #     - APP_STORAGE_ACCESS_KEY=minioadmin
  #     - APP_STORAGE_SECRET_KEY=minioadmin
  #     - APP_SERVER_ADDRESS=0.0.0.0:8080
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  minio_data: 